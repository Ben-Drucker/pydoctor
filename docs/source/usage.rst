Usage
=====

.. contents::

Most common options
-------------------

The following exemple uses all most common options. 
It will add a link to your project website in all pages header and show a link to source code aside every documented elements. 

::

    pydoctor \
        --add-package=(packagedirectory) \
        --project-name=(name) \
        --project-url=https://github.com/(user)/(repo)/ \
        --html-viewsource-base https://github.com/(user)/(repo)/tree/(tag_or_commit_sha) \
        --make-html \
        --html-output=apidocs \
        --project-base-dir "$(pwd)" \
        --docformat=restructuredtext 

.. note:: This exemple assume you are running the ``pydoctor`` build from Unix and the current directory is the root folder of your package. 

.. warning:: The ``--html-viewsource-base`` argument  should point to a tag or a commit SHA rather than a branch since line 
    numbers aren't going to match otherwise when commits are added to the branch after the documentation has been published.

Publish your documentation with Github actions
----------------------------------------------

It is the best practice to automatically generate and publish your documentation through your favorite CI. 

Here is an exemple of how to do it with Github actions and publish the documentation to the default Github pages website, using the third party action ``peaceiris/actions-gh-pages`` (`documentation`__).

__ https://github.com/peaceiris/actions-gh-pages

::

    name: publish-pydoctor-apidocs
    on:
    - push

    jobs:
      deploy:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@master
        - name: Set up Python 3.8
          uses: actions/setup-python@v2
          with:
            python-version: 3.8
        
        - name: Install package
          run: |
            python -m pip install --upgrade pip setuptools wheel
            python -m pip install .
            python -m pip install pydoctor

        - name: Generate pydoctor documentation
          run: |
            # Allow pydoctor to exit with non-zero status code
            set +e

            # Run pydoctor build
            pydoctor \
                --add-package=(packagedirectory) \
                --project-name=(projectname) \
                --project-url=https://github.com/$GITHUB_REPOSITORY \
                --html-viewsource-base https://github.com/$GITHUB_REPOSITORY/tree/$GITHUB_SHA \
                --make-html \
                --html-output=./apidocs \
                --project-base-dir "$(pwd)" \
                --docformat=restructuredtext 

        - name: Publish pydoctor documentation to the gh-pages branch
          uses: peaceiris/actions-gh-pages@v3
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: ./apidocs
            commit_message: "Generate pydoctor documentation"

.. note:: As mentionned in the ``actions-gh-pages`` documentation, the first workflow run won't actually publish the documentation to Github pages. 
    Github pages needs to be enabled afterwards in the repo settings, select ``gh-pages`` branch, then re-run your workflow. 

    The website we'll be at https://(user).github.io/(repo)/

Document part of your package
-----------------------------

Sometimes, only a couple classes or modules are part of your public API, not all classes and modules need to be documented.  

You can choose to document only a couple classes or modules passed with argument ``--html-subject``.

.. warning:: The ``index.html`` won't be generated, you need to link to the specific HTML page. 

Sphinx Integration
------------------

Sphinx object inventories can be used to create deep links between API
documentation generated by pydoctor and by Sphinx.

Linking to external API docs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It can link to external API documentation using a Sphinx objects inventory
with the following cumulative configuration option::

    --intersphinx=http://sphinx-doc.org/objects.inv

Linking to your API docs
~~~~~~~~~~~~~~~~~~~~~~~~

pydoctor's HTML generator will also generate a Sphinx objects inventory
using the following mapping:

* packages, modules -> py:mod:
* classes -> py:class:
* functions -> py:func:
* methods -> py:meth:
* attributes -> py:attr:

To use this mapping in Sphinx, configure the `intersphinx extension`__::

    intersphinx_mapping = {
        'pydoctor': ('http://domain.tld/api', None),
    }

__ https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html

And use external references::

    :py:func:`External API <pydoctor:pydoctor.model.Documentable.reparent>`

    :py:mod:`pydoctor:pydoctor`
    :py:mod:`pydoctor:pydoctor.model`
    :py:func:`pydoctor:pydoctor.driver.getparser`
    :py:class:`pydoctor:pydoctor.model.Documentable`
    :py:meth:`pydoctor:pydoctor.model.Documentable.reparent`
    :py:attr:`pydoctor:pydoctor.model.Documentable.kind`

Customize builds
----------------

.. warning:: Pydoctor does not have a stable API yet. Custom builds are prone to break. 

Use a custom System class
~~~~~~~~~~~~~~~~~~~~~~~~~

You can subclass :py:class:`pydoctor:pydoctor.model.System` and pass your custom class dotted name with the ``--system-class`` argument. 

System class allows you to dynamically show/hide classes or methods. 
This is can also be used by the Twisted project to handle deprecation.

See the `Twisted usage <https://github.com/twisted/twisted/blob/trunk/src/twisted/python/_pydoctor.py>`_.

.. note:: Not fully documented yet

Use a custom HTML templates
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Currently, custom HTLM templates needs to be handled with some "monkeypatch" that will selectively use the appropriate templates.

See the `Twisted usage <https://github.com/twisted/twisted/blob/trunk/src/twisted/python/_release.py>`_.

.. note:: Not fully documented yet

Use a custom HTML writer
~~~~~~~~~~~~~~~~~~~~~~~~

You can subclass the :py:class:`pydoctor:pydoctor.templatewriter.TemplateWriter` and pass your custom class dotted name with the ``--html-writer`` argument. 

.. note:: Not fully documented yet

Full help
---------

.. include:: help.txt