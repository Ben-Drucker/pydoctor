Usage
=====

.. contents::

Most common options
-------------------

The following exemple uses all most common options to generate ``pydoctor``'sown API docs under the ``docs/api`` folder.
It will add a link to the project website in all pages header, show a link to source code aside every documented elements and resolve links to standard library objects.

::

    pydoctor \
        --add-package=pydoctor \
        --project-name=pydoctor \
        --project-url=https://github.com/twisted/pydoctor/ \
        --html-viewsource-base=https://github.com/twisted/pydoctor/tree/20.7.2 \
        --make-html \
        --html-output=docs/api \
        --project-base-dir="$(pwd)" \
        --docformat=epytext \
        --intersphinx=https://docs.python.org/3/objects.inv

.. note:: This exemple assume that you have cloned and installed ``pydoctor`` and you are running the ``pydoctor`` build from Unix and the current directory is the root folder of the Python project.

.. warning:: The ``--html-viewsource-base`` argument  should point to a tag or a commit SHA rather than a branch since line
    numbers aren't going to match otherwise when commits are added to the branch after the documentation has been published.

Publish your documentation
--------------------------

``pydoctor`` output are static HTML pages without no extra server-side support.

With Github actions
~~~~~~~~~~~~~~~~~~~

Here is an exemple to automatically generate and publish your documentation with Github actions and publish the documentation to the default Github pages website.

::

    name: publish-pydoctor-apidocs
    on:
    - push

    jobs:
      deploy:
        runs-on: ubuntu-latest

        steps:
        - uses: actions/checkout@master
        - name: Set up Python 3.8
          uses: actions/setup-python@v2
          with:
            python-version: 3.8
        
        - name: Install package
          run: |
            python -m pip install --upgrade pip setuptools wheel
            python -m pip install .
            python -m pip install pydoctor

        - name: Generate pydoctor documentation
          run: |
            # Allow pydoctor to exit with non-zero status code
            set +e

            # Run pydoctor build
            pydoctor \
                --add-package=(packagedirectory) \
                --project-name=(projectname) \
                --project-url=https://github.com/$GITHUB_REPOSITORY \
                --html-viewsource-base=https://github.com/$GITHUB_REPOSITORY/tree/$GITHUB_SHA \
                --make-html \
                --html-output=./apidocs \
                --project-base-dir="$(pwd)" \
                --docformat=restructuredtext \
                --intersphinx=https://docs.python.org/3/objects.inv

        - name: Publish pydoctor documentation to the gh-pages branch
          uses: peaceiris/actions-gh-pages@v3
          with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            publish_dir: ./apidocs
            commit_message: "Generate pydoctor documentation"

.. note:: As mentionned in the ``actions-gh-pages`` `documentation`__, the first workflow run won't actually publish the documentation to Github pages.
    Github pages needs to be enabled afterwards in the repo settings, select ``gh-pages`` branch, then re-run your workflow.

    The website we'll be at https://(user).github.io/(repo)/

    __ https://github.com/peaceiris/actions-gh-pages

.. With Sphinx and Read The Docs
.. ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. .. note:: Documentation to come!

Document part of your package
-----------------------------

Sometimes, only a couple classes or modules are part of your public API, not all classes and modules need to be documented.

You can choose to document only a couple classes or modules with the following cumulative configuration option::

  --html-subject=pydoctor.zopeinterface.ZopeInterfaceSystem

This will generate only ``pydoctor.zopeinterface.ZopeInterfaceSystem.html`` and ``objects.inv`` (and CSS and JS files of course).
The ``--add-package`` argument still needs to be passed, ``--html-subject`` will act like a filter.

.. warning:: The ``index.html`` and other index files won't be generated, you need to link to the specific HTML page.

Sphinx Integration
------------------

Sphinx object inventories can be used to create links in both ways between
documentation generated by pydoctor and by Sphinx.

Linking from pydoctor to external API docs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

It can link to external API documentation using a Sphinx objects inventory
with the following cumulative configuration option::

    --intersphinx=https://docs.python.org/3/objects.inv

Then, your interpreted text, with backtics (`````) using `restructuredtext` and with ``L{}`` tag using `epytext`, will be linked to the Python element. Exemple::

  `datetime.datetime`
  L{datetime.datetime}

Linking from Sphinx to your pydoctor API docs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

pydoctor's HTML generator will also generate a Sphinx objects inventory that can be used with the following mapping:

* packages, modules -> ``:py:mod:``
* classes -> ``:py:class:``
* functions -> ``:py:func:``
* methods -> ``:py:meth:``
* attributes -> ``:py:attr:``

To use this mapping in Sphinx, configure the `intersphinx extension`__::

    intersphinx_mapping = {
        'twisted': ('https://twistedmatrix.com/documents/current/api/', None),
    }

__ https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html

Link to elements :py:func:`with custom text <twisted:twisted.web.client.urlunparse>` with::

    :py:func:`with custom text <twisted:twisted.web.client.urlunparse>`

Link to elements with default label :py:class:`twisted:twisted.web.client.HTTPDownloader` with::

    :py:class:`twisted:twisted.web.client.HTTPDownloader`

Possible links are::

  :py:func:`Twisted urlunparse() function <twisted:twisted.web.client.urlunparse>`

  :py:mod:`twisted:twisted`
  :py:mod:`twisted:twisted.web.client`
  :py:func:`twisted:twisted.web.client.urlunparse`
  :py:class:`twisted:twisted.web.client.HTTPDownloader`
  :py:meth:`twisted:twisted.mail.smtp.SMTPClient.connectionMade`
  :py:attr:`twisted:twisted.protocols.amp.BinaryBoxProtocol.boxReceiver`

Customize builds
----------------

.. warning:: PyDoctor does not have a stable API yet. Custom builds are prone to break.

Use a custom System class
~~~~~~~~~~~~~~~~~~~~~~~~~

You can subclass the :py:class:`pydoctor:pydoctor.zopeinterface.ZopeInterfaceSystem` and pass your custom class dotted name with the following argument::

  --system-class=mylib._pydoctor.CustomSystem

System class allows you to dynamically show/hide classes or methods.
This is also used by the Twisted project to handle deprecation.

See the `TwistedSystem custom class documentation <https://twistedmatrix.com/documents/current/api/twisted.python._pydoctor.TwistedSystem.html>`_. Naviguate to the source code for a better overview.

.. note:: Not fully documented, prone to break

Use custom HTML templates
~~~~~~~~~~~~~~~~~~~~~~~~~

Currently, custom HTLM templates needs to be handled with some "monkeypatch" that will selectively use the appropriate templates.

See the `Twisted APIBuilder custom class documentation <https://twistedmatrix.com/documents/current/api/twisted.python._release.APIBuilder.html>`_. Naviguate to the source code for a better overview.
The key thing is to apply a patch to the :py:func:`pydoctor:pydoctor.templatewriter.util.templatefile` function before the build.

.. note:: Not fully documented, prone to break

Use a custom HTML writer
~~~~~~~~~~~~~~~~~~~~~~~~

You can subclass the :py:class:`pydoctor:pydoctor.templatewriter.writer.TemplateWriter` and pass your custom class dotted name with the following argument::

  --html-writer=mylib._pydoctor.CustomTemplateWriter

.. note:: Not fully documented, prone to break
